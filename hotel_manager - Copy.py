from models import Session, Hotel, Room, Booking
from datetime import datetime, date, timedelta
import os

# Simple image handling for console app (PIL ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í‡∑Ä)
class ConsoleImageManager:
    @staticmethod
    def handle_image_upload(hotel, session):
        """Console application ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥ upload ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏"""
        print("\n--- ‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫ ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---")
        print("‡∑Ä‡∂ª‡∑ä‡∂≠‡∂∏‡∑è‡∂±‡∂∫‡∑ö‡∂Ø‡∑ì ‡∂î‡∂∂‡∂ß image path ‡∂ë‡∂ö enter ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫.")
        print("1. ‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫ ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í‡∑Ä ‡∂â‡∂Ø‡∑í‡∂ª‡∑í‡∂∫‡∂ß ‡∂∫‡∂±‡∑ä‡∂±")
        print("2. ‡∂¥‡∑É‡∑î‡∑Ä ‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫ ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏")
        
        choice = input("‡∂î‡∂∂‡∂ú‡∑ö ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏ (1/2): ")
        
        if choice == '1':
            image_path = input("‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫‡∑ö path ‡∂ë‡∂ö ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±: ")
            
            if os.path.exists(image_path):
                try:
                    with open(image_path, 'rb') as f:
                        image_data = f.read()
                    
                    hotel.image_data = image_data
                    hotel.image_filename = os.path.basename(image_path)
                    hotel.image_content_type = 'image/jpeg'
                    session.commit()
                    print("‚úÖ ‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì!")
                except Exception as e:
                    print(f"‚ùå ‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫ ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∑Ä‡∑í‡∂∫: {e}")
            else:
                print("‚ùå ‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫ ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫!")
        else:
            print("‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫ ‡∂ë‡∂ö‡∂≠‡∑î ‡∂±‡∑ú‡∂ö‡∂ª ‡∂â‡∂Ø‡∑í‡∂ª‡∑í‡∂∫‡∂ß ‡∂∫‡∂±‡∑Ä‡∑è...")

class HotelManager:
    def __init__(self):
        self.session = Session()
    
    def add_hotel_with_image_interactive(self):
        """Interactive hotel addition with image"""
        print("\n--- ‡∂±‡∑Ä ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫ ‡∑É‡∂∏‡∂ú) ---")
        
        name = input("‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ‡∂±‡∂∏: ")
        location = input("‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂∫: ")
        description = input("‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫: ")
        owner_name = input("‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î‡∂ú‡∑ö ‡∂±‡∂∏: ")
        owner_email = input("‡∂ä‡∂∏‡∑ö‡∂Ω‡∑ä: ")
        contact_number = input("‡∂Ø‡∑î‡∂ª‡∂ö‡∂Æ‡∂± ‡∂Ö‡∂Ç‡∂ö‡∂∫: ")
        price_per_night = float(input("‡∂ª‡∑è‡∂≠‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∂ö ‡∂∏‡∑í‡∂Ω: "))
        total_rooms = int(input("‡∂ö‡∑è‡∂∏‡∂ª ‡∂ú‡∂´‡∂±: "))
        amenities = input("‡∑É‡∑î‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∑ì ‡∑É‡∑ö‡∑Ä‡∑è (comma separated): ")
        
        hotel = Hotel(
            name=name,
            location=location,
            description=description,
            owner_name=owner_name,
            owner_email=owner_email,
            contact_number=contact_number,
            price_per_night=price_per_night,
            total_rooms=total_rooms,
            available_rooms=total_rooms,
            amenities=amenities
        )
        
        self.session.add(hotel)
        self.session.commit()
        
        # ‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫ ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        ConsoleImageManager.handle_image_upload(hotel, self.session)
        
        # Rooms create ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        self._create_rooms_for_hotel(hotel.id, total_rooms)
        
        print(f"‚úÖ {name} ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì!")
        return hotel
    
    def _create_rooms_for_hotel(self, hotel_id, total_rooms):
        """‡∑Ñ‡∑úùëá‡∑ô‡∂Ω‡∑ä ‡∂ë‡∂ö‡∂ß rooms create ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏"""
        room_types = ['Single', 'Double', 'Suite']
        
        for i in range(1, total_rooms + 1):
            room_type = room_types[i % len(room_types)]
            capacity = 1 if room_type == 'Single' else 2 if room_type == 'Double' else 4
            
            room = Room(
                hotel_id=hotel_id,
                room_number=f"{i:03d}",
                room_type=room_type,
                capacity=capacity,
                price_per_night=5000 + (i % 3) * 2000,
                is_available=True,
                features="WiFi, AC, TV"
            )
            self.session.add(room)
        
        self.session.commit()
    
    def get_all_hotels(self):
        """‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏"""
        return self.session.query(Hotel).all()
    
    def get_hotel_by_id(self, hotel_id):
        """ID ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏"""
        return self.session.query(Hotel).filter(Hotel.id == hotel_id).first()
    
    def search_hotels(self, location=None, max_price=None):
        """‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä search ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏"""
        query = self.session.query(Hotel)
        
        if location:
            query = query.filter(Hotel.location.ilike(f"%{location}%"))
        if max_price:
            query = query.filter(Hotel.price_per_night <= max_price)
        
        return query.all()
    
    def display_hotel_with_image(self, hotel):
        """‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫ ‡∑É‡∂∏‡∂ú ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä display ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏"""
        print(f"\nüè® {hotel.name}")
        print(f"üìç {hotel.location}")
        print(f"üí∞ ‡∂ª‡∑î. {hotel.price_per_night:.2f} per night")
        print(f"üõèÔ∏è {hotel.available_rooms}/{hotel.total_rooms} ‡∂ö‡∑è‡∂∏‡∂ª available")
        print(f"üìû {hotel.contact_number}")
        print(f"‚úâÔ∏è {hotel.owner_email}")
        
        if hotel.image_data:
            print("üñºÔ∏è ‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫: [Available]")
        else:
            print("üñºÔ∏è ‡∂¢‡∂∫‡∑è‡∂ª‡∑î‡∂¥‡∂∫: [Not Available]")
        
        print("-" * 50)
    
    def close(self):
        """Session close ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏"""
        self.session.close()

class RoomManager:
    def __init__(self):
        self.session = Session()
    
    def get_available_rooms(self, hotel_id, check_in_date, check_out_date, guests=1):
        """Available rooms ‡∂∂‡∂Ω‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏"""
        # Simple implementation for now
        available_rooms = self.session.query(Room).filter(
            Room.hotel_id == hotel_id,
            Room.is_available == True,
            Room.capacity >= guests
        ).all()
        
        return available_rooms
    
    def close(self):
        self.session.close()