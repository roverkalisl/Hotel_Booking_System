from models import Session, User, Hotel, Booking
from datetime import date

class SuperAdminSystem:
    def __init__(self, auth_system):
        self.session = Session()
        self.auth = auth_system
    
    def dashboard(self):
        """Super admin dashboard"""
        while True:
            print("\n" + "="*60)
            print("üõ°Ô∏è SUPER ADMIN DASHBOARD")
            print("="*60)
            print("1. üë• ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∂±‡∑ä ‡∂¥‡∑è‡∂Ω‡∂±‡∂∫")
            print("2. üè® ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏")
            print("3. üìä ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í ‡∑É‡∂Ç‡∂õ‡∑ä‚Äç‡∂∫‡∑è‡∂Ω‡∑ö‡∂õ‡∂±")
            print("4. üìã ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä")
            print("5. üìÖ ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂∂‡∑î‡∂ö‡∑í‡∂±‡∑ä‡∂ú‡∑ä")
            print("6. üîô ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä")
            
            choice = input("\n‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏ (1-6): ")
            
            if choice == '1':
                self.manage_users()
            elif choice == '2':
                self.approve_hotels()
            elif choice == '3':
                self.view_statistics()
            elif choice == '4':
                self.view_all_hotels()
            elif choice == '5':
                self.view_all_bookings()
            elif choice == '6':
                break
            else:
                print("‚ùå ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏!")
    
    def manage_users(self):
        """‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∂±‡∑ä ‡∂¥‡∑è‡∂Ω‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏"""
        users = self.session.query(User).all()
        
        print(f"\nüë• ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∂±‡∑ä ({len(users)})")
        print("="*50)
        
        for user in users:
            status = "‚úÖ Active" if user.is_active else "‚ùå Inactive"
            hotel_info = f" (Hotel ID: {user.hotel_id})" if user.hotel_id else ""
            print(f"ID: {user.id} | {user.username} | {user.full_name} | {user.user_type}{hotel_info} | {status}")
        
        print("\n‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥:")
        print("1. ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è activate/deactivate ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏")
        print("2. ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏")
        print("3. ‡∂Ü‡∂¥‡∑É‡∑î")
        
        choice = input("‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏ (1-3): ")
        
        if choice == '1':
            self.toggle_user_status()
        elif choice == '2':
            self.delete_user()
    
    def toggle_user_status(self):
        """‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö status change ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏"""
        user_id = input("‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ID: ")
        
        try:
            user_id = int(user_id)
            user = self.session.query(User).filter(User.id == user_id).first()
            
            if user:
                user.is_active = not user.is_active
                status = "activated" if user.is_active else "deactivated"
                self.session.commit()
                print(f"‚úÖ {user.username} {status}!")
            else:
                print("‚ùå ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫!")
        except ValueError:
            print("‚ùå ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± ID!")
    
    def delete_user(self):
        """‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏"""
        user_id = input("‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ID: ")
        
        try:
            user_id = int(user_id)
            user = self.session.query(User).filter(User.id == user_id).first()
            
            if user and user.user_type != 'super_admin':
                confirmation = input(f"'{user.username}' ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂± (y/n): ")
                if confirmation.lower() == 'y':
                    self.session.delete(user)
                    self.session.commit()
                    print("‚úÖ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì!")
            else:
                print("‚ùå ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫ ‡∑Ñ‡∑ù super admin ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö!")
        except ValueError:
            print("‚ùå ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± ID!")
    
    def approve_hotels(self):
        """‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏"""
        pending_hotels = self.session.query(Hotel).filter(Hotel.is_approved == False).all()
        
        if not pending_hotels:
            print("\n‚úÖ ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑î ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠!")
            return
        
        print(f"\nüè® ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑î ‡∑Ñ‡∑úùëá‡∑ô‡∂Ω‡∑ä ({len(pending_hotels)})")
        print("="*50)
        
        for hotel in pending_hotels:
            print(f"\nID: {hotel.id} | {hotel.name}")
            print(f"üìç {hotel.location}")
            print(f"üë§ {hotel.owner_name} | üìû {hotel.contact_number}")
            print(f"üí∞ ‡∂ª‡∑î. {hotel.price_per_night:,.2f} | üõèÔ∏è {hotel.total_rooms} ‡∂ö‡∑è‡∂∏‡∂ª")
            
            approve = input("\n‡∂∏‡∑ô‡∂∏ ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂Ø? (y/n): ")
            if approve.lower() == 'y':
                hotel.is_approved = True
                hotel.approved_by = self.auth.current_user.id
                hotel.approved_at = date.today()
                self.session.commit()
                print(f"‚úÖ {hotel.name} ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì!")
            else:
                print(f"‚ùå {hotel.name} ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∂±‡∑ú‡∂ö‡∑Ö‡∑è!")
    
    def view_statistics(self):
        """‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í ‡∑É‡∂Ç‡∂õ‡∑ä‚Äç‡∂∫‡∑è‡∂Ω‡∑ö‡∂õ‡∂±"""
        total_users = self.session.query(User).count()
        total_hotels = self.session.query(Hotel).count()
        approved_hotels = self.session.query(Hotel).filter(Hotel.is_approved == True).count()
        pending_hotels = self.session.query(Hotel).filter(Hotel.is_approved == False).count()
        total_bookings = self.session.query(Booking).count()
        
        print("\n" + "="*50)
        print("üìä ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í ‡∑É‡∂Ç‡∂õ‡∑ä‚Äç‡∂∫‡∑è‡∂Ω‡∑ö‡∂õ‡∂±")
        print("="*50)
        print(f"üë• ‡∂∏‡∑î‡∑Ö‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∂±‡∑ä: {total_users}")
        print(f"üè® ‡∂∏‡∑î‡∑Ö‡∑î ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä: {total_hotels}")
        print(f"‚úÖ ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä: {approved_hotels}")
        print(f"‚è≥ ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂á‡∂≠‡∑í: {pending_hotels}")
        print(f"üìÖ ‡∂∏‡∑î‡∑Ö‡∑î ‡∂∂‡∑î‡∂ö‡∑í‡∂±‡∑ä‡∂ú‡∑ä: {total_bookings}")
        
        # User type breakdown
        user_types = self.session.query(User.user_type, User.is_active).all()
        type_count = {}
        for user_type, active in user_types:
            if user_type not in type_count:
                type_count[user_type] = {'total': 0, 'active': 0}
            type_count[user_type]['total'] += 1
            if active:
                type_count[user_type]['active'] += 1
        
        print(f"\n‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∑Ä‡∂ª‡∑ä‡∂ú:")
        for user_type, counts in type_count.items():
            print(f"  {user_type}: {counts['active']}/{counts['total']} active")
    
    def view_all_hotels(self):
        """‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏"""
        hotels = self.session.query(Hotel).all()
        
        print(f"\nüè® ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑Ñ‡∑ú‡∂ß‡∑ô‡∂Ω‡∑ä ({len(hotels)})")
        print("="*50)
        
        for hotel in hotels:
            status = "‚úÖ Approved" if hotel.is_approved else "‚è≥ Pending"
            print(f"ID: {hotel.id} | {hotel.name} | {hotel.location} | {status}")
    
    def view_all_bookings(self):
        """‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂∂‡∑î‡∂ö‡∑í‡∂±‡∑ä‡∂ú‡∑ä ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏"""
        bookings = self.session.query(Booking).all()
        
        print(f"\nüìÖ ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂∂‡∑î‡∂ö‡∑í‡∂±‡∑ä‡∂ú‡∑ä ({len(bookings)})")
        print("="*50)
        
        for booking in bookings:
            print(f"ID: {booking.id} | {booking.guest_name} | {booking.check_in_date} to {booking.check_out_date} | {booking.status}")
    
    def close(self):
        """Session close ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏"""
        self.session.close()